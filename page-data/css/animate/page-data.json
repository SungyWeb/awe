{"componentChunkName":"component---src-templates-blog-jsx","path":"/css/animate/","result":{"data":{"markdownRemark":{"html":"<h1>背景</h1>\n<p>前端动画场景需求很多，有些朋友技术实现方案也不知道怎么选，下面从各个角度对动画整体体系进行分类，让我们清晰的了解动画整个体系。</p>\n<h1>分类</h1>\n<h2>业务角度</h2>\n<p>从业务角度来说，动画可分为展示型和交互型。</p>\n<ul>\n<li>\n<p>展示型动画 类似 Gif 图片或者一段视频，来增加用户的视觉体验，主要特点体现在用户可以感知，但无法参与。实现方式有 Gif、canvas、CSS3 动画等。</p>\n</li>\n<li>\n<p>交互型动画 在动画播放的过程中用户可以进行操作，如点击、滑动等。但是通过原生代码实现交互动画是很复杂的，同时性能和兼容性也不容忽视，比较好的方案还是寻求相关框架。</p>\n</li>\n</ul>\n<h2>绘制技术角度</h2>\n<p>不管采用什么方式来制作动画，最终呈现到前端的页面无非是三种形式： <code>div</code> <code>cavas</code> <code>svg</code>。为了简单也可以使用视频，除非动画的播放场景固定，不然很容易踩坑。</p>\n<h3>canvas</h3>\n<ul>\n<li>👍 效率高、性能好、可控制高</li>\n<li>👍 能够以<code>png</code>或<code>jpg</code>格式保存图像</li>\n<li>👍 逐像素渲染，适合图像密集的场景，许多对象会被频繁重绘</li>\n<li>👎 不支持事件处理器</li>\n<li>👎 文本渲染能力弱</li>\n</ul>\n<h3>div</h3>\n<ul>\n<li>👍 Dom 动画，可以通过 css 或 js 实现</li>\n<li>👍 适合简单的、数量少的、复杂度低的动画场景</li>\n</ul>\n<h3>svg</h3>\n<ul>\n<li>👍 基于<code>xml</code>的 2D 图形，矢量图，不会失真，不依赖分辨率</li>\n<li>👍 支持时间处理器，精确控制任意元素，且 svg 对象属性变化时，浏览器能够自动重绘</li>\n<li>👍 适合大型渲染区域的应用程序（如地图）</li>\n<li>👎 复杂度高会影响渲染速度（任何过度使用 dom 的应用都不快）</li>\n<li>👎 不适合游戏应用</li>\n</ul>\n<p>总体来说，canvas 和 svg 都是 2D 作图，svg 是矢量图，适合复杂度不高的应用场景；canvas 是位图，逐像素渲染，适合游戏。</p>\n<h2>动画类型</h2>\n<h3>序列帧动画</h3>\n<p>将静态的图片进行快速的播放，形成一个动态的动画效果。</p>\n<p>GIF 实现</p>\n<ul>\n<li>画质不佳，颜色支持少，最多 256 色，透明度支持差</li>\n<li>不能直接控制播放、暂停、播放次数等，灵活性差</li>\n<li>会引起页面周期性的绘制，性能比较差</li>\n</ul>\n<p>连续切换图片地址（不推荐）</p>\n<ul>\n<li>多张图片会带来多个 http 请求</li>\n<li>每张图片首次加载时会造成图片切换的闪烁</li>\n<li>不利于文件管理</li>\n</ul>\n<p>连续切换雪碧图位置（推荐）</p>\n<ul>\n<li>可以通过 css、js 控制 dom 或 js 绘制 canvas 实现</li>\n<li>推荐通过<code>transform:translate3d()</code>实现雪碧图位置变化，启动设备<code>GPU</code>来提高性能</li>\n<li>注意<code>animation</code>的<code>animation-timing-function</code>要采用阶梯函数<code>steps()</code>来实现逐帧动画的连续播放</li>\n</ul>\n<h3>关键帧动画</h3>\n<p>在制作动画时，只需要指定几个特殊时刻动画的状态，其余的状态由计算机自动计算补充</p>\n<ul>\n<li>CSS3 Animation 通过除了<code>steps()</code>之外的时间函数实现</li>\n<li>CSS3 Transition 只能设定初始和结束两个关键帧状态，一条<code>transition</code>只能指定一个属性（<code>all</code>除外）</li>\n<li>使用 js 动画库或框架，比如<a href=\"https://animejs.com/documentation/\">Anime.js</a></li>\n</ul>\n<h3>svg 动画</h3>\n<p>SVG 依然是 DOM ，他有自己独有的 Animation 标签，但也支持 CSS 的属性，其实现动画的本质是依赖于线条和填充，线条的变化，导致填充区域的改变，从而引起形状的变化。而线条则依赖于路径和锚点，路径和锚点的改变，直接影响了线条的变化。</p>\n<p>可以用 AI 等 SVG 编辑工具生成 SVG 图片后，配合<a href=\"https://animejs.com/documentation/\">Anime.js</a>、<a href=\"https://greensock.com/\">GSAP</a>等现有库进行动画制作</p>\n<h3>骨骼动画</h3>\n<p>骨骼动画就是把角色的各部分身体部件图片绑定到一根根互相作用连接的“骨头”上，通过控制这些骨骼的位置、旋转方向和放大缩小而生成的动画。</p>\n<p>可以使用类似 <a href=\"http://zh.esotericsoftware.com/\">Spine</a> 和 <a href=\"https://dragonbones.github.io/cn/index.html\">DragonBones</a> 这样的工具，但是做动画真的是一个体力活，你需要不断的调试，以求达到一种让人看起来舒服的状态。</p>\n<h3>3D 动画</h3>\n<p>前端 3D 动画实现可以通过 perspective 属性操作用 CSS 3D 来实现，或者直接借助开源的 Three.js 开源库进行实现。</p>\n<h1>总结</h1>\n<h2>简单的展示型动画：</h2>\n<p>对于比较简单的动画，我们可以先尝试使用原生 CSS 的 transition\\animation 属性来进行实现。</p>\n<h2>简单的展示型动画+弱交互：</h2>\n<p>对于简单的动画展示并且需要有简单的交互行为，比如用户点击一下暂停执行相应操作，待操作完成继续播放动画，交互方面比较偏弱，可以采用 Anime.js 的方案。</p>\n<p>Anime.js 不仅仅支持所有的 CSS 属性，而且可以通过 Timeline，callback， playback controls 来控制动画执行的各个状态，并且 Anime.js 可以配合实现 SVG 动画。</p>\n<h2>复杂的展示型动画：</h2>\n<p>如果所需的资源很小，可以先考虑使用 GIF 动图或者逐帧动画 CSS 实现；</p>\n<p>如果所需的资源较大，可以使用 Lottie 方案，然后设计同学用 AE 到处动画 json，将动画还原为 svg/canvas/html。</p>\n<h2>强交互&#x26;互动小游戏&#x26;骨骼动画：</h2>\n<p>对于交互场景比较负责或者需要做一个小游戏，可以采用 PixiJs，通过 WebGL 来渲染，利用硬件资源，极大的提升性能，在兼容性方面，对于不支持 WebGL 的浏览器，可以使用 canvas 渲染来平稳回退；</p>\n<p>如果是需要展示骨骼动画，可以通过 PixiJs 方案进行渲染由 Spine 或 DragonBones 输出的文件。</p>","frontmatter":{"title":"前端动效"}}},"pageContext":{"slug":"/css/animate/"}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}